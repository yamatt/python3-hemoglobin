name: Test Hemoglobin

env:
  name: hemoglobin
  command: hemoglobin

on: push

jobs:
  lint:
    name: Run some linting
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Lint
        run: |
          python3 -m pip install flake8==3.7.8
          python3 -m pip install black==19.10b0
          # look for formatting errors
          python3 -m black --diff --check --target-version py35 --target-version py36 --target-version py37 .
          # stop the build if there are Python syntax errors or undefined names
          python3 -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          python3 -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  test:
    name: Test the library
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
      - name: Test
        run: python3 -m unittest discover tests
  functional-test:
    name: Test the cli by running it
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
      - name: Run the cli
        run: |
          python3 -m ${{ env.name }} --help
          python3 -m ${{ env.name }} "${{secrets.GRAMMARBOT_APIKEY}}" samples/example.txt
  api-length-check:
    name: 'Checks the max chars in the CLI thousands:'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        text-length-thousands: [5, 9, 10, 11]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
      - name: Run the cli with large files
        run: |
          python3 -c 'print(len(open("./samples/long_1000c.txt", "r").read()*${{ matrix.text-length-thousands }}))' > test.txt
          wc -c test.txt
          python3 -m ${{ env.name }} "${{secrets.GRAMMARBOT_APIKEY}}" test.txt
